RUBBER DUCKING

A given Object has a set of attributes, each with a name (in the form of an std::string) and a type (identified by an std::type_index stored in the RTTI instance pointed to by a given mmoc::Any).
A set of defaults will be pushed to a recieving Object from one or more parental Object's immediately above it (which implies that the immediate parents of a given Object need be ordered into a list).
These parent Object's themselves may have further parents from which their attributes are recieved via pushing.
Various configurations/implementations for a general type/class of Object may sometimes require different sets of attributes which should always share some minimal set of attributes amongst themselves, thus identifying the general type/class of Object through said minimal set of attributes. (However, is there a reasonable situation in which this could not be and indeed was necessarily not the case? I can't think of one as of the time of writing.)
A given Object, when being pushed to, may not have all of the attributes that are being pushed to due to the incomplete state of the Object, however it must always have the attributes corresponding with the type/class of the Object such that those can be relied upon as a general interface, thus forming the conception of the Object which is what defines the general type/class of the Object. These general types/classes of Object's correspond to actual C++ classes derived from the Object class which implement (in the sense of enforcing the necessity of) the aforementioned attributes that correspond with the type/class of the Object. (How is this necessity enforced? A general mechanism to enforce said necessity must be thought of; one which also must inform the programmer of what was not implemented if the enforcing fails by the way of an exception.)
A problem then arises; how are the additional attributes not part of the Object's type/class's interface generated?
Firstly, they must be generated by the Object pushing defaults as the Object recieving them cannot know, unless manually implemented (which is not an option as we do not want to inconvenience the programmer unnecessarily), the full set of possible defaults.
Secondly, this implies that different defaults correspond to different functions being applied to the pushee, with said functions adding and setting the appropriate attributes. This then implies that said functions are stored in the Object which pushes in some form. This then raises the question: in what form, then?
